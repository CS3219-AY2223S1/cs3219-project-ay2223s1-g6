version: "3.8"
services:
    frontend:
        container_name: ${FRONTEND_HOST}
        restart: always
        build:
            context: ./frontend
        ports:
            - "${FRONTEND_PORT}:${FRONTEND_PORT}"
        networks:
            - pp-g6
    user-service:
        container_name: ${USER_SERVICE_HOST}
        build:
            context: ./user-service
        ports:
            - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
        networks:
            - pp-g6
            - ${USER_SERVICE_HOST}-network
        depends_on:
            # user-service-mongo:
            #     condition: service_started
            user-service-redis:
                condition: service_started
    # user-service-mongo:
    #     container_name: ${USER_SERVICE_MONGO_HOST}
    #     image: mongo:latest
    #     ports:
    #         - "${USER_SERVICE_MONGO_PORT}:${USER_SERVICE_MONGO_PORT}"
    #     networks:
    #         - ${USER_SERVICE_HOST}-network
    user-service-redis:
        container_name: ${USER_SERVICE_REDIS_HOST}
        image: redis:latest
        ports:
            - "${USER_SERVICE_REDIS_PORT}:${USER_SERVICE_REDIS_PORT}"
        command: redis-server --bind 0.0.0.0 --protected-mode no
        networks:
            - ${USER_SERVICE_HOST}-network
    matching-service:
        container_name: ${MATCHING_SERVICE_HOST}
        build:
            context: ./matching-service
        ports:
            - "${MATCHING_SERVICE_PORT}:${MATCHING_SERVICE_PORT}"
        networks:
            - pp-g6
            - ${MATCHING_SERVICE_HOST}-network
        depends_on:
            matching-service-pgsql:
                condition: service_started
    matching-service-pgsql:
        container_name: ${MATCHING_SERVICE_POSTGRES_HOST}
        image: postgres:latest
        environment:
            - POSTGRES_PASSWORD=${MATCHING_SERVICE_POSTGRES_PASSWORD}
        ports:
            - "${MATCHING_SERVICE_POSTGRES_PORT}:${MATCHING_SERVICE_POSTGRES_PORT}"
        networks:
            - ${MATCHING_SERVICE_HOST}-network
        volumes:
            - ./db/init.sql:/docker-entrypoint-initdb.d/create_db.sql
    question-service:
        container_name: ${QUESTION_SERVICE_HOST}
        build:
            context: ./question-service
        ports:
            - "${QUESTION_SERVICE_PORT}:${QUESTION_SERVICE_PORT}"
        networks:
            - pp-g6
    collaboration-service:
        container_name: ${COLLABORATION_SERVICE_HOST}
        build:
            context: ./editor-service
        ports:
            - "${COLLABORATION_SERVICE_PORT}:${COLLABORATION_SERVICE_PORT}"
        networks:
            - pp-g6
    communication-service:
        container_name: ${COMMUNICATION_SERVICE_HOST}
        build:
            context: ./chat-service
        ports:
            - "${COMMUNICATION_SERVICE_PORT}:${COMMUNICATION_SERVICE_PORT}"
        networks:
            - pp-g6

networks:
    pp-g6:
        name: pp-g6
        driver: bridge
    pp-user-service-network:
        name: ${USER_SERVICE_HOST}-network
        driver: bridge
    pp-matching-service-network:
        name: ${MATCHING_SERVICE_HOST}-network
        driver: bridge

volumes:
    postgres:
